/* The purpose of this option is to work backward from Destination,
we first find every CityCycle stop which is roughly ui [user input] kilometers
in a straight line from destination d(dx,dy)                            */

h1 = ui/sc;

/* where the variable sc is a coefficient transferring latitude 
and longitude to kilometers by multiplying the map scale by a constant. */

/* this section will first suggest CityCycle destinations that are closer to 
the destination, then city cycles that are in the quadrants to the left and right */

 // Case 1: Top right quadrant

   /* "HEY API!"  
   
if((dx-CCLat) >= 0 && (dy-CCLong) >= 0) {

   SELECT CCLong, CCLat, ...
   FROM CityCycleLocationsAPI
   WHERE CCLat > oy AND CCLong > ox
   ORDER BY GoogleAPITravelTime;

   "Now store a few of those in an array, then part 2 (optional) TLQ:"
   
   SELECT CCLong, CCLat, ...
   FROM CityCycleLocationsAPI
   WHERE CCLat > oy AND ox > CCLong
   ORDER BY GoogleAPITravelTime;
   
   "Now store a few of those in an array, then  part 3 (optional) BRQ:"
   
   SELECT CCLong, CCLat, ...
   FROM CityCycleLocationsAPI
   WHERE oy > CCLat AND CCLong > ox
   ORDER BY GoogleAPITravelTime;   

   */
}

// Case 2: Top left quadrant
   
   /* "HEY API!"
   
if((dx-CCLat) <= 0 && (dy-CCLong) >= 0) {

   SELECT CCLong, CCLat, ...
   FROM CityCycleLocationsAPI
   WHERE CCLat > oy AND ox > CCLong
   ORDER BY GoogleAPITravelTime;

   "Now store a few of those in an array, then part 2 (optional) BLQ:"
   
   SELECT CCLong, CCLat, ...
   FROM CityCycleLocationsAPI
   WHERE oy > CCLat AND ox > CCLong
   ORDER BY GoogleAPITravelTime;
   
   "Now store a few of those in an array, then  part 3 (optional) TRQ:"
   
   SELECT CCLong, CCLat, ...
   FROM CityCycleLocationsAPI
   WHERE CCLat > oy AND CCLong > ox
   ORDER BY GoogleAPITravelTime;
   
   */
}

// Case 3: Bottom left quadrant

   /* "HEY API!"

if((dx-CCLat) <= 0 && (dy-CCLong) <= 0) {

   SELECT CCLong, CCLat, ...
   FROM CityCycleLocationsAPI
   WHERE oy > CCLat AND ox > CCLong
   ORDER BY GoogleAPITravelTime;
   
   "Now store a few of those in an array, then part 2 (optional) TLQ:"
   
   SELECT CCLong, CCLat, ...
   FROM CityCycleLocationsAPI
   WHERE CCLat > oy AND ox > CCLong
   ORDER BY GoogleAPITravelTime;
   
   "Now store a few of those in an array, then  part 3 (optional) BRQ:"
   
   SELECT CCLong, CCLat, ...
   FROM CityCycleLocationsAPI
   WHERE oy > CCLat AND CCLong > ox
   ORDER BY GoogleAPITravelTime;
   
   */
}


// Case 4: Bottom right quadrant

   /* "HEY API!"
   
if((dx-CCLat) >= 0 && (dy-CCLong) >= 0) {

   SELECT CCLong, CCLat, ...
   FROM CityCycleLocationsAPI
   WHERE oy > CCLat AND CCLong > ox
   ORDER BY GoogleAPITravelTime;
 
   "Now store a few of those in an array, then part 2 (optional) BLQ:"
   
   SELECT CCLong, CCLat, ...
   FROM CityCycleLocationsAPI
   WHERE oy > CCLat AND ox > CCLong
   ORDER BY GoogleAPITravelTime;
   
   "Now store a few of those in an array, then  part 3 (optional) TRQ:"
   
   SELECT CCLong, CCLat, ...
   FROM CityCycleLocationsAPI
   WHERE CCLat > oy AND CCLong > ox
   ORDER BY GoogleAPITravelTime;
   
   */
}

/* repeat similar code to select parking stations, where CCLocaion(CCLat, CCLong) 
is substituted for Destination d(dx,dy) and Parking p(px,py)
is substituted for CCLocaion(CCLat, CCLong)                      */

/* repeat again, where Parking p(px,py)
is substituted for CCLocaion(CCLat, CCLong) and Origin o(ox,oy)
is substituted for Parking p(px,py)                              */

/* Note: in this option we do not ask for a distance, we just return in order of
distance the an array of n dimensions for the user to choose from.      */

// next step: return to front end and visualize :)
